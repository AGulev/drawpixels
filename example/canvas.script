function init(self)
  msg.post(".", "acquire_input_focus")
  msg.post("@render:", "clear_color", {color = vmath.vector4(1, 1, 1, 1)})
  -- size of texture when scaled to nearest power of two
  local width = 1024
  local height = 2048
  local channels = 4

  -- we have to create table with next fields: buffer, width, height, channels
  self.buffer_info = {
    buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
    width = width,
    height = height,
    channels = channels -- 3 for rgb, 4 for rgba
  }
  self.dirty = true
  self.current_color = vmath.vector4(0, 0, 0, 1)
  self.current_tool = "pencil"
  -- drawing params
  self.prev_pos = vmath.vector3()
  self.resource_path = go.get("#sprite", "texture0")
  self.header = {
    width = width,
    height = height,
    type = resource.TEXTURE_TYPE_2D,
    format = resource.TEXTURE_FORMAT_RGBA,
    num_mip_maps = 1
  }
  self.rotation = 0
end

function update(self, dt)
  -- update texture if it's dirty (ie we've drawn to it)
  if self.dirty then
    resource.set_texture(self.resource_path, self.header, self.buffer_info.buffer)
    self.dirty = false
  end
  self.rotation = self.rotation + 1
  if self.rotation > 360 then
    self.rotation = 0
  end
end

function on_message(self, message_id, message, sender)
  if message_id == hash("change_color") then
    self.current_color = message.color
    if self.current_tool == "eraser" then
      self.current_tool = "pencil"
    end
  elseif message_id == hash("change_tool") then
    self.current_tool = message.tool
  elseif message_id == hash("clear") then
    drawpixels.fill(self.buffer_info, 0, 0, 0, 0)
    self.dirty = true
  end
end

local function color_vector_to_bytes(color)
  return color.x * 255, color.y * 255, color.z * 255, color.w * 255
end

function on_input(self, action_id, action)
  if action_id == hash("touch") then
    local pos = vmath.vector3(action.x, action.y, 0)
    if action.pressed then
      self.drawing = true
      self.touch_pos = pos
    elseif action.released then
      self.drawing = false
    end
    if self.drawing then
      -- calculate the length and direction from the previous touch
      -- position to the current position
      local length = math.ceil(vmath.length(self.touch_pos - pos))
      local dir = vmath.normalize(self.touch_pos - pos)
      if length == 0 then
        length = 1
        dir = vmath.vector3(0)
      end
      if self.prev_pos == pos then
        return false
      end
      self.prev_pos = self.touch_pos
      -- use current tool from the previous touch position to
      -- the current touch position0
      while length > 0 do
        local r, g, b, a = color_vector_to_bytes(self.current_color)
        if self.current_tool == "pencil" then
          drawpixels.filled_rect(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 4, 4, r, g, b, a)
        elseif self.current_tool == "circle" then
          drawpixels.circle(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 40, r, g, b, a)
        elseif self.current_tool == "filled_circle" then
          drawpixels.filled_circle(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 40, r, g, b, a)
        elseif self.current_tool == "rect" then
          drawpixels.rect(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 40, 60, r, g, b, a)
        elseif self.current_tool == "filled_rect" then
          drawpixels.filled_rect(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 60, 40, r, g, b, a)
        elseif self.current_tool == "eraser" then
          drawpixels.rect(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 40, 40, 0, 0, 0, 0)
        elseif self.current_tool == "rotated_rect" then
          drawpixels.filled_rect(self.buffer_info, self.touch_pos.x, self.touch_pos.y, 60, 40, r, g, b, a, self.rotation)
        end
        self.dirty = true
        self.touch_pos = self.touch_pos - dir
        length = length - 1
      end
    end
  end
end
