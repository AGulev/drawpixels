function init(self)
  msg.post("@render:", "clear_color", {color = vmath.vector4(1, 1, 1, 1)})
  -- size of texture when scaled to nearest power of two
  local width = 512
  local height = 512
  local channels = 4

  self.resource_path = gui.get_node("box")

  self.buffer_info = {
    buffer = buffer.create(width * height, {{name = hash("rgba"), type = buffer.VALUE_TYPE_UINT8, count = channels}}),
    width = width,
    height = height,
    channels = channels
  }

  drawpixels.fill(self.buffer_info, 255, 255, 0, 255)

  drawpixels.start_fill()
  drawpixels.line(self.buffer_info, width * 0.2, width * 0.1, width * 0.9, width * 0.9, 255, 0, 0, 255, true)
  drawpixels.line(self.buffer_info, width * 0.3, width * 0.8, width * 0.9, width * 0.9, 255, 0, 0, 255, true)
  drawpixels.line(self.buffer_info, width * 0.3, width * 0.8, width * 0.2, width * 0.1, 255, 0, 0, 255, true)
  drawpixels.fill_area(self.buffer_info, width * 0.1, width * 0.5, 255, 0, 0, 255)
  drawpixels.end_fill()
  -- Fills everything around because point is not in a triangle

  local data = buffer.get_bytes(self.buffer_info.buffer, hash("rgba"))

  if gui.new_texture("oh_hi_mark", width, height, image.TYPE_RGBA, data) then
    gui.set_texture(self.resource_path, "oh_hi_mark")
    gui.set_size(self.resource_path, vmath.vector3(width, height, 0))
  else
    error("Unable to create texture")
  end

end
